{
  "noir_version": "1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d",
  "hash": "10485977642000415091",
  "abi": {
    "parameters": [
      {
        "name": "secret",
        "type": { "kind": "field" },
        "visibility": "private"
      },
      { "name": "uuid", "type": { "kind": "field" }, "visibility": "private" },
      {
        "name": "merkle_index",
        "type": { "kind": "field" },
        "visibility": "private"
      },
      {
        "name": "survey_id",
        "type": { "kind": "field" },
        "visibility": "public"
      },
      {
        "name": "nullifier",
        "type": { "kind": "field" },
        "visibility": "public"
      },
      {
        "name": "merkle_root",
        "type": { "kind": "field" },
        "visibility": "public"
      },
      {
        "name": "merkle_proof",
        "type": { "kind": "array", "length": 10, "type": { "kind": "field" } },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "4640225700116937458": {
        "error_kind": "fmtstring",
        "length": 53,
        "item_types": [{ "kind": "field" }, { "kind": "field" }]
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+2ce3cTVRTFTxpKKVBsRUDN+4FvcSaTxwS1VEEtKqhFBbWoSTNBBbWoRS0qqEX9OP7tx/IDuDxjzixuJ4NezNksslbuWnvNcDPd2ff+zr0ZkrQpGrTfWE/TcEvJcUmOntOs14NWLXA9t+PU2l2/4dQb3abv+m7Db/RqvucFft1vtbvtltN2617g9httr+8M2rzh5dxe8+IdYbZ7WTtiWf+S85RxnjbO5+U8+rkF8dnPus/oj9pUbA6c0Zq7Q3E+F/RyOQTkfmBMch78/zlr8Y7bqc8DxvnBWH0eYt3PeoD1oPRHj6VpuMXnxBmtuVOEYUe6OTtA71rKmNvdcp5hZVk5Vp5VYBVZJVaZVWFVox9KyzFDN+FHfdmEvlxCXz6hr5DQV0zoKyX0lRP6Kgl9VbpZVFHbozvB24ps1EWcUfAK+oOW1fPq5fS82nk9L7eg5hW4RTWvNbek5uW7ZTUvx61oeQWOW9VbQ4kvOOGLR/TCspPsXnAOsx5iPcx6RPqTvE2/Q5bej7IeYz3OeoL++2brbtgLIq8n9Vi5SWN1RmtuyEBzvBmpBe2chxUzHiHdmxPtsWak5rX8who8Qvo3vk8Rdh8K/aM9YYbs9ooQSLhQauH4jH5tRlnJpzWXWcmundNRzFgnLG+Tcd2Sd4PVZLVY/r/w1uCjOP5/6qcB4F1XHHMbzLttcN1lyfsoDd50eob1LOHWd07yac1lTrJr5zyqmHGRsLxNxouWvI9JpudYzxNufeckk2b9HAPwXlQc83Ew7+MG11lL3idYL7BeZL1EuPWdl3xac5mX7No5TyhmXCYsb5PxsiXvk6yXWa+wXiXc+s5LJs36OQngvaw45lNg3qcMrrsteZ9mvcZ6nfUG4dZ3QfJpzWVBsmvnPK2YcYWwvE3GK5a8z7DeZL3Feptw67sgmTTr5wyA94rimM+CeZ81uO6x5H2O9Q7rXdZ7hFvfRcmnNZdFya6d85xixlXC8jYZr1ryPs96n/UB60PCre+iZNKsn/MA3quKY+6AeXcMrnsteXdZa6weKyDc+i5JPq25LEl27ZxdxYx9wvI2GfcteV9gfcT6mPUJ4dZ3STJp1s8FAO++4pgvgnlfNLjOWfK+xPqU9Rnrc8Kt77Lk05rLsmTXznlJMeM6YXmbjNcteV9mfcH6kvUV4dZ3WTJp1s9lAO91xTFvgHlvGFz3WfK+wvqa9Q3rW8Kt74rk05rLimTXznlFMeMmYXmbjDcteV9lfcf6nvUD4dZ3RTJp1s9VAO9NxTFfA/O+ZnC9x5L3ddaPrJ9YPxNufVcln9ZcViW7ds7rihm3CMvbZLxlyfsG6xfWrzT4Qj6S95Yy7xuAnNN3Me+kL2CnZA7mjMfC68JxhN+VC78TEX5uGn62Er7/Gr5Hs1eu3yc1Y3pRjP+ff2Q2fu8FSz7dui2pjLHexnk3A5x3qwnM7QK914DeSJZ1nHcN+MsC0BpsAHOvjak3sgaRax6ZG1gnrRrO2+vgvJFrvtXFeU/2kzvsPdlPhr3HdD9p9XDeyP2kBrwf9MZ0TqB7rAf07gPnpDae3sj9BMmyBfw/SQNYJ5N7iDvsPbmHGPae3EMMt225U7re2/4YiDNiQ+bU/EMjUbYFOc7KcdrInlZ8vsh/J8bfjfxnMP5e5Gs2sy+at7Tx/PE6iDLNxuZcOWsnlZAvHXvOeEbzmvjvg4dtKvbv+OciaYtr489nPjafkC/+c7MJWc2+qLbmaLjFueyS4/QtvGaMx83rZ2LXohjuT8gUZf8bsSKn8TFKAAA=",
  "debug_symbols": "pVfbjuIwDP2XPPchduxc5ldWK1SgjCpVBXVgpBWaf9+WOqUgJWLIC4c69dFxcuy2V7VvtpfPTdsfjl/q489VbYe269rPTXfc1ef22I/R60+l4uXmPDTNGFKr9THrVA9Nf1Yf/aXrKvVdd5fbTV+nur/huR7GVV2ppt+POBIe2q6Z/v1U92ydTjWWJJl0WNL5MR8y+YwxH+w93z3kYzof0QchQKMxxWDSDAA2SgDw/I4GBzZqcEanGDijwTkTNbiQrMKmGQKxEAT2b+SDxmUXtOV3agg6ngQETNaQ8RKZxUtOp7yUyWcbj8HqZD7kzBj8YsbkFkCpm8EUWwmo2EvAhWbKEbzopmwZxXayLlZhvU/aIWQIQjwLt7KDfSRAnRtOFEcr4monnykyjgKk2BSA9r4N4F9XYZiXEWndW4UYTwtFKKag1aD+DQUt/YmMNkmRGXPOxSP164fFE4ErfV754g7HUNzhRhd2eI7gxQ7PlvFah2cdYSmqQLt6Zjw5wlChIwwXOsLYYkcYV+4IX+oIX+yIbBmvOSI3sx3HEeHc48z+O17Vu3Z4eINWejz3SsHtFyfllTLTJlaKZuAZ7DTCK+Vm8DOEGUALgiAKGkESZEEhA2GDkc5MGKa36FGHnh2HIIjzOhpBkvtY0ErcCXqJC5/Rc9yAIErcCJLEWdBK3AmKPhNmJD3HCQRFH4k+En0k+kj0kegj0Ueij0Ufiz4WfSz6WPSx6GPRx6KPJ77JLd/10NbbrpFvo8Ol360+lc7/TnElfkydhuOu2V+GZjLFbW20yX8=",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "use poseidon::poseidon2::Poseidon2;\nuse trees::merkle::{Calculator, MembershipProver, MerkleTree, MT_Creator};\n\n// for 1024 leaf nodes merkle tree\nfn main(\n    secret: Field,\n    uuid: Field,\n    merkle_index: Field,\n    survey_id: pub Field,\n    nullifier: pub Field,\n    merkle_root: pub Field,\n    merkle_proof: pub [Field; 10],\n) {\n    let correct_nullifier = Poseidon2::hash([secret, uuid, survey_id], 3);\n    assert_eq(\n        nullifier,\n        correct_nullifier,\n        f\"Invalid nullifier: {nullifier} != {correct_nullifier}\",\n    );\n\n    let leaf_node = Poseidon2::hash([secret, uuid], 2);\n    let mut mt = MerkleTree::new(hasher);\n    mt.root = merkle_root;\n    mt.membership(leaf_node, merkle_index, merkle_proof)\n}\n\nfn hasher(leaves: [Field; 2]) -> Field {\n    Poseidon2::hash(leaves, 2)\n}\n\n#[test]\nfn test_main() {\n    let secret: Field = 1;\n    println(f\"secret: {secret}\");\n    let uuid: Field = Poseidon2::hash([0xdddddd], 1);\n    println(f\"uuid: {uuid}\");\n    let survey_id: Field = 1;\n    println(f\"survey_id: {survey_id}\");\n    let nulifier = Poseidon2::hash([secret, uuid, survey_id], 3);\n    println(f\"nulifier: {nulifier}\");\n    let leaf_node = Poseidon2::hash([secret, uuid], 2);\n    let path = make_path_with_zero_node(leaf_node);\n    let merkle_root = MerkleTree::new(hasher).calculate_root(leaf_node, 0, path);\n\n    main(secret, uuid, 0, survey_id, nulifier, merkle_root, path);\n}\n\nfn make_path_with_zero_node(leaf_node: Field) -> [Field; 10] {\n    let mut paths = [0; 10];\n\n    let mut node = leaf_node;\n    for i in 0..10 {\n        paths[i] = Poseidon2::hash([node, 0], 2);\n        node = paths[i];\n    }\n    paths\n}\n",
      "path": "/Users/ssup/Desktop/dev/projects/zk-survey/packages/circuit/src/main.nr"
    },
    "57": {
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "/Users/ssup/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon2.nr"
    },
    "60": {
      "source": "pub use crate::types::{Calculator, MembershipProver, Modifier, MT_Creator};\n\npub struct MerkleTree<T> {\n    pub root: T,\n    pub hasher: fn([T; 2]) -> T,\n}\n\nimpl<T> MT_Creator<T> for MerkleTree<T>\nwhere\n    T: Eq + Default,\n{\n    fn default(root: T, hasher: fn([T; 2]) -> T) -> Self {\n        Self { root, hasher }\n    }\n\n    fn from(root: T, hasher: fn([T; 2]) -> T) -> Self {\n        Self::default(root, hasher)\n    }\n\n    fn new(hasher: fn([T; 2]) -> T) -> Self {\n        Self::from(T::default(), hasher)\n    }\n}\n\nimpl<T> MembershipProver<T, T> for MerkleTree<T>\nwhere\n    T: Eq + Default,\n{\n    fn membership<let N: u32>(self, leaf: T, indexes: Field, hash_path: [T; N]) {\n        let root = self.calculate_root(leaf, indexes, hash_path);\n        assert(self.root == root);\n    }\n}\n\nimpl<T> Modifier<T, T> for MerkleTree<T>\nwhere\n    T: Eq + Default,\n{\n    fn add<let N: u32>(&mut self, leaf: T, indexes: Field, hash_path: [T; N]) {\n        let (old, new) = self.calculate_two_roots(leaf, indexes, hash_path);\n        assert(old == self.root);\n        self.root = new;\n    }\n\n    fn delete<let N: u32>(&mut self, leaf: T, indexes: Field, hash_path: [T; N]) {\n        let (new, old) = self.calculate_two_roots(leaf, indexes, hash_path);\n        assert(old == self.root);\n        self.root = new;\n    }\n\n    fn update<let N: u32>(&mut self, leaf: T, old_leaf: T, indexes: Field, hash_path: [T; N]) {\n        let index_bits: [u1; N] = indexes.to_le_bits();\n\n        let mut old_parent = old_leaf;\n        let mut new_parent = leaf;\n\n        for i in 0..hash_path.len() {\n            let sibling = hash_path[i];\n            if index_bits[i] == 0 {\n                new_parent = (self.hasher)([new_parent, sibling]);\n                old_parent = (self.hasher)([old_parent, sibling]);\n            } else {\n                new_parent = (self.hasher)([sibling, new_parent]);\n                old_parent = (self.hasher)([sibling, old_parent]);\n            }\n        }\n        assert(old_parent == self.root);\n        self.root = new_parent;\n    }\n}\n\nimpl<T> Calculator<T, T> for MerkleTree<T>\nwhere\n    T: Eq + Default,\n{\n    fn calculate_root<let N: u32>(self, leaf: T, indexes: Field, hash_path: [T; N]) -> T {\n        let index_bits: [u1; N] = indexes.to_le_bits();\n        let mut node = leaf;\n        for i in 0..hash_path.len() {\n            let sibling = hash_path[i];\n            if index_bits[i] == 0 {\n                let left = node;\n                let right = sibling;\n                node = (self.hasher)([left, right]);\n            } else {\n                let left = sibling;\n                let right = node;\n                node = (self.hasher)([left, right]);\n            }\n        }\n        node\n    }\n\n    /*\n     * Calculates two roots for a given leaf entry based on the passed array of siblings: one root\n     * for if the leaf entry was included in the tree and one for if the leaf entry was not included\n     * in the tree. This is useful for efficiently proving the membership of leaf entries for a\n     * tree while simultaneously modifying the tree.\n     * @param entry The key and value of an entry [k, v]\n     * @param siblings Contains the siblings from bottom to top\n     * @returns Two root nodes: the first one doesn't include entry, the second does\n     */\n    fn calculate_two_roots<let N: u32>(self, leaf: T, indexes: Field, hash_path: [T; N]) -> (T, T) {\n        let index_bits: [u1; N] = indexes.to_be_bits();\n\n        // root_with_leaf is a container for hashes to derive the root node for the tree that\n        // includes the entry\n        let mut root_with_leaf = leaf;\n        // root_without_leaf is a container for hashes to derive the root node for the tree that\n        // doesn't include the entry\n        let mut root_without_leaf = T::default();\n\n        // iterate over the levels of the tree from bottom to top\n        for i in 0..hash_path.len() {\n            if i == 0 {\n                root_without_leaf = hash_path[i];\n            }\n            let sibling = hash_path[i];\n            // After the first sibling is found, the processes are started to calculate the two root nodes.\n            // The calulcation of the root node that includes the entry is comparable to `calculate_root`.\n            // To calc the root node that doesn't include entry, the first sibling is put into the container\n            // and starting from each SUBSEQUENT iteration it is hashed with its sibling and the resulting hash\n            // again stored in the container until the root is reached\n            if index_bits[i] == 0 {\n                root_with_leaf = (self.hasher)([root_with_leaf, sibling]);\n                if (root_without_leaf != sibling) {\n                    root_without_leaf = (self.hasher)([root_without_leaf, sibling]);\n                }\n            } else {\n                root_with_leaf = (self.hasher)([sibling, root_with_leaf]);\n                if (root_without_leaf != sibling) {\n                    root_without_leaf = (self.hasher)([sibling, root_without_leaf]);\n                }\n            }\n        }\n        (root_without_leaf, root_with_leaf)\n    }\n}\n",
      "path": "/Users/ssup/nargo/github.com/privacy-scaling-explorations/zk-kit.noir/merkle-trees-v0.0.1/packages/merkle-trees/src/merkle.nr"
    }
  },
  "names": ["main"],
  "brillig_names": ["directive_to_radix"]
}
